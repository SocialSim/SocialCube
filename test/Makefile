# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = googletest/googletest/

# Where to find user code.
USER_DIR = ../src

# Where to find test code.
TEST_DIR = .

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g --std=c++11 -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = Simulator_test Event_test ObjectPreference_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Universal requirement for SocialCube
Event.o : $(USER_DIR)/common/Event.cpp $(USER_DIR)/common/Event.hpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

DependentEventLogger.o : $(USER_DIR)/DependentEventLogger/DependentEventLogger.cpp $(USER_DIR)/DependentEventLogger/DependentEventLogger.hpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

ObjectPreference.o : $(USER_DIR)/Dependency/ObjectPreference.cpp $(USER_DIR)/Dependency/ObjectPreference.hpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

SimulatorProfiler.o : $(USER_DIR)/Simulator/SimulatorProfiler.cpp $(USER_DIR)/Simulator/SimulatorProfiler.hpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

Simulator.o : $(USER_DIR)/Simulator/Simulator.cpp $(USER_DIR)/Simulator/Simulator.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/Simulator/Simulator.cpp

Simulator_unittest.o : $(TEST_DIR)/Simulator_unittest.cc \
                     $(USER_DIR)/Simulator/Simulator.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Simulator_unittest.cc

Simulator_test: Simulator.o Simulator_unittest.o gtest_main.a Event.o DependentEventLogger.o SimulatorProfiler.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Event_unittest.o : $(TEST_DIR)/Event_unittest.cc \
                     $(USER_DIR)/common/Event.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Event_unittest.cc

Event_test: Event.o Event_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

ObjectPreference_unittest.o : $(TEST_DIR)/ObjectPreference_unittest.cc \
                     $(USER_DIR)/Dependency/ObjectPreference.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/ObjectPreference_unittest.cc

ObjectPreference_test: ObjectPreference.o ObjectPreference_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
